Git

git config --global user.name "Your Name"               #设置名字
git config --global user.email "email@example.com"		#设置邮箱
mkdir			#创建文件夹
cd				#进入文件
pwd 			#显示当前目录
git init        #目录变成Git可以管理的仓库
git add         #把文件添加到仓库
git commit -m "Saying"    #把文件提交到仓库,-m后面输入的是本次提交的说明

/***

git add file1.txt
git add file2.txt
git add file3.txt
git commit -m "add 3 files."

***/

git status	    #仓库当前的状
git diff		#查看difference
git log			#显示从最近到最远的提交日志
git log --pretty=oneline		#只看commit id（版本号）
git reset --hard HEAD^			#上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
git reset --hard 3628164		#commit id（版本号）
git reflog						#记录你的每一次命令
cat file 						#看文件内容	
git diff HEAD -- readme.txt 	#查看工作区和版本库里面最新版本的区别
git checkout 					#丢弃工作区的修改
git reset HEAD files 			#把暂存区的修改撤销掉
rm test 						#删除文件
git commit -m "remove test.txt"	#版本库中删除该文件
ssh-keygen -t rsa -C "youremail@example.com"		#创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件
git remote add origin https://github.com/aass0810/awesome-python-webapp.git
git push -u origin master
git clone git@github.com:Ueser/Git仓库名称	#克隆
git checkout -b dev				#创建dev分支，git checkout命令加上-b参数表示创建并切换
git branch dev					#查看当前分支
git checkout master				#切换回master分支
git merge dev					#命令用于合并指定分支到当前分支
git branch -d dev				#删除dev分支

/***

查看分支：git branch
创建分支：git branch name
切换分支：git checkout name
创建+切换分支：git checkout -b name
合并某分支到当前分支：git merge name
删除分支：git branch -D name
删除远程分支：git push origin :branchName

***/
git stash					#把当前工作现场“储藏”起来
git stash list					#查看工作现场
git stash apply					#恢复
git stash drop					#删除
git stash pop					#恢复并删除
git remote					#查看远程库的信息，远程仓库的默认名称是origin。
git remote -v					#显示更详细的信息
git push origin master/dev		#推送分支
git checkout -b dev origin/dev	#创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支
git pull						#抓取分支
git tag v1.0					#创建标签
git log --pretty=oneline --abbrev-commit		#查看commit
git show tagname								#查看标签信息
git tag -a v0.1 -m "version 0.1 released" 3628164		#-a指定标签名，-m指定说明文字
git tag -d v0.1 				#删除标签
git push origin tagname：		#推送某个标签到远程
git push origin --tags			#一次性推送全部尚未推送到远程的本地标签

/***
删除远程标签
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
$ git tag -d v0.9
Deleted tag 'v0.9' (was 6224937)
然后，从远程删除。删除命令也是push，但是格式如下：
$ git push origin :refs/tags/v0.9
To git@github.com:michaelliao/learngit.git
 - [deleted]         v0.9
***/

git config --global color.ui true		#Git显示颜色
https://github.com/github/gitignore		#忽略特殊文件
git config --global alias.st status		#配置别名

Sublime Text

选择类
Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。
Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。
Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。
Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。
Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。
Ctrl+M 光标移动至括号内结束或开始的位置。
Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。
Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。
Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。
Ctrl+Shift+] 选中代码，按下快捷键，展开代码。
Ctrl+K+0 展开所有折叠代码。
Ctrl+← 向左单位性地移动光标，快速移动光标。
Ctrl+→ 向右单位性地移动光标，快速移动光标。
shift+↑ 向上选中多行。
shift+↓ 向下选中多行。
Shift+← 向左选中文本。
Shift+→ 向右选中文本。
Ctrl+Shift+← 向左单位性地选中文本。
Ctrl+Shift+→ 向右单位性地选中文本。
Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。
Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。
Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。
Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。


编辑类

Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。
Ctrl+Shift+D  复制光标所在整行，插入到下一行。
Tab 向右缩进。
Shift+Tab 向左缩进。
Ctrl+K+K 从光标处开始删除代码至行尾。
Ctrl+Shift+K 删除整行。
Ctrl+/ 注释单行。
Ctrl+Shift+/ 注释多行。
Ctrl+K+U 转换大写。
Ctrl+K+L 转换小写。
Ctrl+Z 撤销。
Ctrl+Y 恢复撤销。
Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。
Ctrl+F2 设置书签
Ctrl+T 左右字母互换。
F6 单词检测拼写


搜索类

Ctrl+F 打开底部搜索框，查找关键字。
Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。
Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。
Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。
Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。
Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。
Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。
Esc 退出光标多行选择，退出搜索框，命令框等。


显示类

Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。
Ctrl+PageDown 向左切换当前窗口的标签页。
Ctrl+PageUp 向右切换当前窗口的标签页。
Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）
Alt+Shift+2 左右分屏-2列
Alt+Shift+3 左右分屏-3列
Alt+Shift+4 左右分屏-4列
Alt+Shift+5 等分4屏
Alt+Shift+8 垂直分屏-2屏
Alt+Shift+9 垂直分屏-3屏
Ctrl+K+B 开启/关闭侧边栏。
F11 全屏模式
Shift+F11 免打扰模式